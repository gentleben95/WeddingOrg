// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeddingOrg.Data;

#nullable disable

namespace WeddingOrg.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221208182727_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeddingOrg.Models.Bride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brides");
                });

            modelBuilder.Entity("WeddingOrg.Models.Cameraman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cameramen");
                });

            modelBuilder.Entity("WeddingOrg.Models.Groom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grooms");
                });

            modelBuilder.Entity("WeddingOrg.Models.Photographer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photographers");
                });

            modelBuilder.Entity("WeddingOrg.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("WeddingOrg.Models.Wedding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrideId")
                        .HasColumnType("int");

                    b.Property<int?>("CameramanId")
                        .HasColumnType("int");

                    b.Property<string>("DateOfSigningTheContract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfTheWedding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroomId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrideId");

                    b.HasIndex("CameramanId");

                    b.HasIndex("GroomId");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Weddings");
                });

            modelBuilder.Entity("WeddingOrg.Models.Wedding", b =>
                {
                    b.HasOne("WeddingOrg.Models.Bride", "Bride")
                        .WithMany()
                        .HasForeignKey("BrideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeddingOrg.Models.Cameraman", null)
                        .WithMany("Weddings")
                        .HasForeignKey("CameramanId");

                    b.HasOne("WeddingOrg.Models.Groom", "Groom")
                        .WithMany()
                        .HasForeignKey("GroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeddingOrg.Models.Photographer", null)
                        .WithMany("Weddings")
                        .HasForeignKey("PhotographerId");

                    b.HasOne("WeddingOrg.Models.Restaurant", null)
                        .WithMany("Weddings")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Bride");

                    b.Navigation("Groom");
                });

            modelBuilder.Entity("WeddingOrg.Models.Cameraman", b =>
                {
                    b.Navigation("Weddings");
                });

            modelBuilder.Entity("WeddingOrg.Models.Photographer", b =>
                {
                    b.Navigation("Weddings");
                });

            modelBuilder.Entity("WeddingOrg.Models.Restaurant", b =>
                {
                    b.Navigation("Weddings");
                });
#pragma warning restore 612, 618
        }
    }
}

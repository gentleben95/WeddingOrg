@page "/addcameraman"
@inject WeddingOrg.Controllers.CameramenController CameramanController
@using WeddingOrg.DTOs
<PageTitle>Dodaj kamerzystę</PageTitle>
<RadzenTemplateForm TItem="FilledInfo" Data=@fbInsta Submit=@OnSubmit>
    <RadzenCard Class="my-5 mx-auto" Style="max-width: 400px;">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Facebook kamerzysty</RadzenText>
        <RadzenMask CharacterPattern="[0-10]" Placeholder="facebook.com" Name="Facebook" @bind-Value=@fbInsta.Facebook Change=@(args => OnChange(args, "Telephone")) Style="width: 100%;" />
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Class="mt-4">Instagram kamerzysty</RadzenText>
        <RadzenMask Mask="**** **** **** ****" CharacterPattern="[0-9]" Placeholder="instagram.com" Name="Instagram" @bind-Value=@fbInsta.Instagram Change=@(args => OnChange(args, "Credit Card")) Style="width: 100%;" />
        <div class="row">
            <div class="col-md-12 d-flex align-items-end justify-content-left mt-4">
                <RadzenButton ButtonType="ButtonType.Submit"  Text="dodaj" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" style="margin-left: 10px;" Text="anuluj" />
            </div>
        </div>
    </RadzenCard>
</RadzenTemplateForm>
<EventConsole @ref=@console Class="mt-4" />
<div class="form-group">
    <input class="form-control" type="text" placeholder="Filtruj..."
           @bind="Filter"
           @bind:event="oninput">
</div>
<table class="table table-striped">
    <thead class="thead-light">
        <tr>
            <th>ID</th>
            <th>Facebook Kamerzysty</th>
            <th>Instagram Kamerzysty</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cameraman in Cameramen)
        {
            if (!IsVisible(cameraman))
                continue;
            <tr>
                <td>
                    @cameraman.Id
                </td>     
                <td>
                    @cameraman.Facebook
                </td>
                <td>
                    @cameraman.Instagram
                </td>
             </tr>
        }
    </tbody>
</table>
@code {

    protected override async Task OnInitializedAsync()
    {
        Cameramen = (await CameramanController.GetCameramen()).ToList();
    }
    private List<WeddingOrg.Models.Cameraman> Cameramen = new();

    public class FilledInfo
    {
        public string Facebook { get; set; }
        public string Instagram { get; set; }
    }
    FilledInfo fbInsta = new FilledInfo();
    void OnSubmit(FilledInfo arg)
    {
        var updateCameramanDto = new UpdateCameramanDto(fbInsta.Facebook, fbInsta.Instagram);
        CameramanController.CreateCameraman(updateCameramanDto);
    }
    EventConsole console;

    void OnChange(string value, string name)
    {
        console.Log($"{name} value changed to {value}");
    }
    public string Filter { get; set; }
    public bool IsVisible(WeddingOrg.Models.Cameraman cameraman1)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;
        if (cameraman1.Facebook.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
        if (cameraman1.Instagram.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}